import { NextRequest, NextResponse } from 'next/server';

export async function POST(req: NextRequest) {
  try {
    const { content, category, practiceType } = await req.json();
    if (!content || typeof content !== 'string') {
      return NextResponse.json({ error: 'Invalid content provided' }, { status: 400 });
    }
    const apiKey = process.env.OPENAI_API_KEY;
    if (!apiKey) {
      return NextResponse.json({ error: 'API Key not set' }, { status: 500 });
    }

    const starRatingGuide = `
- 아래 5가지 항목에 대해 각각 5점 만점(★☆☆☆☆ ~ ★★★★★)으로 별점을 매기고, **아래와 같이 Markdown 표 형식(별점 평가)**으로 먼저 제시해줘:

별점 평가
| 항목 | 별점 | 한 줄 평가 |
| --- | --- | --- |
| 문장력과 묘사력 | ★★★☆☆ | ... |
| 흐름과 개연성 | ★★★☆☆ | ... |
| 몰입감과 주제 전달 | ★★★☆☆ | ... |
| 창의성과 독창성 | ★★★☆☆ | ... |
| 전체적 완성도 | ★★★☆☆ | ... |

- 평균 점수에 따라 아래 기준으로 글 수준을 분류해줘:
  - 4.5점 이상: 매우 뛰어난 글
  - 3.5~4.4점: 잘 쓴 글
  - 2.5~3.4점: 평범한 글
  - 2.4점 이하: 부족한 글
- 별점 평균에 따라 피드백 강도와 스타일을 달리해줘(칭찬/중립/구체적 개선/냉정한 비판 등).
`;
    const subjectGenreGuide = `
- 반드시 문제에서 제시한 주제와 장르(예: "속삭이는 그림자", "스팀펑크 톤" 등)가 글에 잘 반영되었는지 평가 항목에 포함해줘.
- 주제와 장르가 잘 드러났는지, 그에 맞는 분위기/스타일/상징/어휘/구성 등이 적절한지 구체적으로 언급해줘.
`;
    const feedbackFormatGuide = `
- 피드백은 다음 순서와 형식으로 제공:
  1) 별점 평가(표)
  2) 감상(3~5문장)
  3) 피드백(별점에 따라 강도/스타일 다르게)
  4) 개선안(2~3가지)
  5) 코멘트(1~2문장)
- 각 항목은 진심 어린 조언, 다양한 어조(감정 몰입형, 평론가형, 편집자형, 멘토형 등)로 랜덤하게 작성.
- 글이 너무 짧거나 주제에서 벗어나면 냉정한 비판도 허용.
`;
      const practiceSpecificPrompts = {
      '필사 연습': `너는 글쓰기 교정자이자 독자야. 아래는 필사 연습을 위해 사용된 글이야. 이 글을 읽고 피드백을 줘.
${starRatingGuide}${subjectGenreGuide}${feedbackFormatGuide}
- 필사 연습의 관점에서 문체, 리듬, 어휘, 원문 모방의 정확성, 현대적 변주 가능성도 함께 평가해줘.
`,
      '문제 풀이': `너는 글쓰기 문제를 채점하고 피드백하는 코치야. 아래 글은 주어진 문제를 풀어서 작성된 글이야. 이 글을 읽고 피드백을 줘.
${starRatingGuide}${subjectGenreGuide}${feedbackFormatGuide}
- 문제 요구사항 충족, 논리 전개, 창의성, 구조적 완성도, 주제/장르 반영 여부를 함께 평가해줘.
`,
      '테마별 글쓰기': `너는 특정 주제(테마) 글을 평가하는 독자 겸 큐레이터야. 아래 글은 특정 테마에 맞춰 작성된 글이야. 피드백을 줘.
${starRatingGuide}${subjectGenreGuide}${feedbackFormatGuide}
- 테마 전달력, 분위기, 상징성, 주제/장르 반영 여부를 함께 평가해줘.
`,
      '제작성 훈련': `너는 상상력과 창작성을 평가하는 이야기 개발자 역할이야. 아래 글을 읽고 피드백을 줘.
${starRatingGuide}${subjectGenreGuide}${feedbackFormatGuide}
- 창작적 발상, 독창성, 서사의 탄탄함, 주제/장르 반영 여부를 함께 평가해줘.
`,
      '5감각 묘사 연습': `너는 감각적 묘사와 몰입감을 평가하는 문학 평론가 역할이야. 아래 글을 읽고 피드백을 줘.
${starRatingGuide}${subjectGenreGuide}${feedbackFormatGuide}
- 오감 묘사의 생생함, 구체성, 이미지의 선명도, 주제/장르 반영 여부를 함께 평가해줘.
`,
      '한 문장 소설': `너는 짧고 강렬한 글을 평가하는 미니픽션 편집자야. 아래 글(한 문장 소설)을 읽고 피드백을 줘.
${starRatingGuide}${subjectGenreGuide}${feedbackFormatGuide}
- 반드시 아래 핵심 포인트별로 구체적으로 피드백해줘:
  1) **함축적 서사력(Condensed Storytelling)**: 한 문장 안에 상황, 인물, 갈등, 여운이 얼마나 압축적으로 담겼는지, 군더더기 없는 구조인지 평가
  2) **강렬한 첫인상과 후킹(Hook)**: 짧아도 독자의 상상력을 자극하거나 여운을 남기는 결말인지, 첫 문장이 강렬한지 평가
  3) **감정·분위기·상징 표현**: 감정을 직접적으로 말하지 않고 이미지/행동/상징으로 잘 표현했는지, 다양한 톤(로맨스, 공포, 미스터리 등) 시도가 있는지 평가
  4) **문장 리듬과 간결성**: 단문, 비유, 반복, 대조 등으로 한 문장을 강하게 만들었는지, 군더더기 없이 단어 하나하나가 살아있는지 평가
- 각 포인트별로 장점/아쉬운 점을 구체적으로 언급하고, 개선안도 위 포인트별로 제시해줘.
- 이 연습이 SNS/광고 카피, 소설의 핵심 문장 작성에도 도움이 된다는 점을 참고해, 실제로 그런 관점에서 피드백을 줘.
- 주제/장르(문제에서 제시된 키워드/톤 등) 반영 여부도 반드시 평가에 포함.
`,
      '이어쓰기': `너는 이어쓰기로 진행된 이야기의 흐름과 톤을 평가하는 편집자야. 아래 글을 읽고 피드백을 줘.
${starRatingGuide}${subjectGenreGuide}${feedbackFormatGuide}
- 연결의 매끄러움, 캐릭터와 사건의 일관성, 주제/장르 반영 여부를 함께 평가해줘.
`,
      '시점 변화 연습': `너는 시점 전환과 서술 흐름을 평가하는 문학 교정자야. 아래 글을 읽고 피드백을 줘.
${starRatingGuide}${subjectGenreGuide}${feedbackFormatGuide}
- 시점의 일관성, 전환의 부드러움, 주제/장르 반영 여부를 함께 평가해줘.
`,
      '자유': `너는 글쓰기 코치이자 다양한 독자 역할을 맡는 피드백 전문가야. 아래 글을 읽고, 마치 한 명의 독자로서 글을 감상하고, 동시에 작가가 성장할 수 있는 깊이 있는 피드백을 줘.

출력은 다음 순서와 기준을 따를 것:

1) **글 수준 평가 (별점 5점 만점)**  
   다음 5가지 기준으로 각각 별점을 매기고, 평균 점수에 따라 글의 전체 수준을 판단해줘:
   - **문장력과 묘사력 (Sentence & Imagery)**
   - **흐름과 개연성 (Flow & Coherence)**
   - **몰입감과 주제 전달 (Engagement & Theme)**
   - **창의성과 독창성 (Creativity & Originality)**
   - **전체적 완성도 (Overall Polish)**
   **아래와 같이 Markdown 표로 별점 평가를 먼저 제시해줘:**
   
   별점 평가
   | 항목 | 별점 | 한 줄 평가 |
   | --- | --- | --- |
   | 문장력과 묘사력 | ★★★☆☆ | ... |
   | 흐름과 개연성 | ★★★☆☆ | ... |
   | 몰입감과 주제 전달 | ★★★☆☆ | ... |
   | 창의성과 독창성 | ★★★☆☆ | ... |
   | 전체적 완성도 | ★★★☆☆ | ... |
   
   **평균 점수에 따른 글 수준 분류:**
   - 4.5점 이상: **매우 뛰어난 글** (거의 완벽한 수준)
   - 3.5~4.4점: **잘 쓴 글** (상당히 좋은 수준)
   - 2.5~3.4점: **평범한 글** (보통 수준)
   - 2.4점 이하: **부족한 글** (개선이 필요한 수준)

2) **감상 (3~6문장)**  
   - 글을 읽고 느낀 감정, 몰입도, 주제 전달력, 인상 깊은 부분을 솔직히 적어줘.  
   - **매우 뛰어난 글**: 큰 칭찬과 응원을 먼저 하고, 독자로서 느낀 감동과 울림을 강조해줘.
   - **잘 쓴 글**: 칭찬과 인상 위주로 시작하되, 글의 스타일에 따라 감정적으로 몰입하거나 차분하게 평가해도 좋다.
   - **평범한 글**: 노력과 의지를 인정하면서 시작해줘.
   - **부족한 글**: 그래도 노력과 의지를 인정하면서 시작해줘.
   - 제목 없이 내용만 작성.

3) **피드백 (강도·스타일 가변)**  
   - 글의 완성도에 따라 피드백 강도를 다르게:
     - **매우 뛰어난 글**: 칭찬을 중심으로, "꼭 필요하진 않지만 이런 시도도 가능하다"는 조언형 피드백을 1~2개만 제시. 작가의 재능을 인정하면서도 더욱 성장할 수 있는 방향을 제시해줘.
     - **잘 쓴 글**: 칭찬 + "이렇게도 표현할 수 있다" 식의 대안 1~2개 제시.
     - **평범한 글**: 중립적으로 분석하며 2~3가지 개선 포인트 제시.
     - **부족한 글**: 냉철하지만 구체적인 피드백(3개 이상) 제시하되, 감상과 조언도 함께 해서 혹평으로만 보이지 않게.
   - 문장력, 개연성, 몰입감, 주제 전달력을 기본 평가 축으로 삼되, 상황에 따라 감정선, 문체, 리듬, 창의성, 독창성도 다룬다.

4) **구체적 개선안**  
   - 중요한 문장이나 부분을 1~2개 골라 **수정 예시 2~3가지**를 제공.
   - **매우 뛰어난 글**: "필수는 아니지만 이렇게도 표현할 수 있다"는 선택적 개선안 형태로 제시.
   - 단순 교정이 아니라, 의미나 분위기를 살리면서 다양한 선택지를 보여준다.

5) **코멘트 (1~2문장)**  
   - 마지막에는 마치 실제 독자가 느낀 한 줄 감상처럼, 간단한 코멘트로 마무리.
   - **매우 뛰어난 글**: 진심 어린 응원이나 기대감을 담은 코멘트로 마무리.
   - 예: "이 장면은 개인적으로 오래 기억에 남을 것 같아요." / "이 글을 조금만 다듬으면 출판작으로도 손색없습니다." / "당신의 재능이 정말 대단해요. 앞으로의 작품들이 기대됩니다."
   - 제목 없이 내용만 작성.

6) **톤 다양화**  
   - 매번 같은 어조를 쓰지 말고, 글의 완성도와 스타일에 따라:
     - **감정 몰입형** (열정적인 독자처럼 감동을 표현),
     - **문학 평론가형** (분석적이고 차분한 평가),
     - **출판 편집자형** (실무적인 조언과 격려),
     - **캐주얼 독자형** (친근하게 감상 나누기),
     - **멘토형** (진심 어린 조언과 응원)
     등으로 피드백 톤을 랜덤하게 섞어서 반복 패턴을 피한다.

**전체적인 목표:**
사용자가 피드백을 읽고 감동받고, 더욱 글쓰기에 대한 동기와 자신감을 얻을 수 있도록 진심 어린 격려와 구체적인 조언을 제공해줘.`
      };

      const specificPrompt = practiceSpecificPrompts[practiceType as keyof typeof practiceSpecificPrompts] || practiceSpecificPrompts['자유'];

    const prompt = `${specificPrompt}다음 형식으로 피드백을 제공해줘:

- 별점 평가(표)
- 감상 (3~5문장)
- 좋은 점 (구체적인 장점들을 - 기호로 나열)
- 개선점 (구체적인 개선점들을 - 기호로 나열)
- 최후통첩 (전체적인 평가와 앞으로의 발전 방향)
- 구체적 개선안 (중요 문장/부분의 수정 예시 2~3가지)
- 코멘트 (1~2문장, 반드시 포함)

**아래 항목 중 하나라도 누락하지 말고 반드시 모두 포함해서 출력할 것. 만약 쓸 내용이 없으면 '없음'이라고라도 반드시 출력할 것.**

만약 글이 너무 짧거나 주제에서 벗어났다면 냉정한 비판도 허용한다.

사용자의 글:
${content}`;

    const response = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${apiKey}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        model: 'gpt-4-turbo',
        messages: [{ role: 'user', content: prompt }],
        max_tokens: 1500,
        temperature: 0.7,
      }),
    });

    const data = await response.json();
    if (!response.ok) {
      return NextResponse.json({ error: data.error?.message || 'OpenAI API Error', details: data.error }, { status: 500 });
    }
    const result = data.choices?.[0]?.message?.content || '';
    if (!result.trim()) {
      return NextResponse.json({ error: 'Empty response from AI' }, { status: 500 });
    }
    return NextResponse.json({ result });
  } catch (error) {
    return NextResponse.json({ error: 'Internal server error', details: error instanceof Error ? error.message : 'Unknown error' }, { status: 500 });
  }
} 